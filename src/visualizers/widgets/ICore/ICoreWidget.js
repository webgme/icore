/*globals define, WebGMEGlobal, $, _*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Nov 30 2016 10:36:41 GMT-0600 (Central Standard Time).
 */

define([
    './ICoreKeyboard',
    'codemirror/lib/codemirror',
    'jquery',
    './ICoreConsoleCodeMirrorMode',
    'css!./styles/ICoreWidget.css'
], function (ICoreKeyboard, codeMirror) {
    'use strict';

    var ICoreWidget,
        WIDGET_CLASS = 'i-core-widget',
        LOG_LEVELS = {
            debug: 0,
            info: 1,
            warn: 2,
            error: 3
        };


    ICoreWidget = function (logger, container, config) {
        var templateId;
        this._logger = logger.fork('Widget');

        this._el = container;
        this._logLevel = LOG_LEVELS[config.consoleWindow.logLevel] || 0;
        this._autoSave = config.codeEditor.autoSave;
        this._autoSaveTimerId = null;
        this._templates = config.templates;
        this._defaultTemplateId = null;

        for (templateId in this._templates) {
            if (this._templates[templateId].default) {
                this._defaultTemplateId = templateId;
                break;
            }
        }

        if (!this._defaultTemplateId) {
            this._logger.warn('No default template defined!');
        }

        this._initialize(config);

        this._logger.debug('ctor finished');
    };

    //_.extend(ICoreWidget.prototype, ICoreKeyboard.prototype);

    ICoreWidget.prototype._initialize = function (config) {
        var width = this._el.width(),
            height = this._el.height(),
            self = this,
            codeEditorOptions = {
                value: '',
                mode: 'javascript',
                lineNumbers: true,
                matchBrackets: true,
                tabSize: 2,
                gutters: ['CodeMirror-linenumbers']
            },
            consoleWindowOptions = {
                value: '',
                mode: 'ICoreConsole',
                readOnly: true,
                lineWrapping: true,
                theme: 'monokai'
            },
            extraKeys = {
                'Ctrl-S': function (cm) {
                    self.saveCode();
                },
                'Esc': function (cm) {
                    self.toggleConsole();
                },
                'Ctrl-Q': function (cm) {
                    self.executeCode();
                }
            };

        this._el.addClass(WIDGET_CLASS);

        // The code editor.
        this._codeEditor = codeMirror(this._el[0], codeEditorOptions);
        $(this._codeEditor.getWrapperElement()).addClass('code-editor');

        this._codeEditor.on('change', function(cm, event) {
            if (event.origin !== 'setValue') {
                if (self._autoSave) {
                    clearTimeout(self._autoSaveTimerId);
                    self._autoSaveTimerId = setTimeout(function () {
                        self._autoSaveTimerId = null;
                        self.saveCode();
                    }, config.codeEditor.autoSaveInterval);
                }
            }
        });

        this._codeEditor.setOption('extraKeys', extraKeys);

        // The console window.
        this._consoleWindow = codeMirror(this._el[0], consoleWindowOptions);
        $(this._consoleWindow.getWrapperElement()).addClass('console-window');
        this._consoleWindow.setOption('extraKeys', extraKeys);

        this._consoleStr = 'Use the logger to print here (e.g. this.logger.info)';
        this._logs = [];


        this.setOrientation(config.consoleWindow.verticalOrientation);
    };

    // Adding/Removing/Updating items
    ICoreWidget.prototype.addNode = function (desc) {
        if (typeof desc.scriptCode === 'string') {
            this._codeEditor.setValue(desc.scriptCode);
        } else if (typeof this._defaultTemplateId === 'string'){
            this._codeEditor.setValue(this._templates[this._defaultTemplateId].script);
        } else {
            this._codeEditor.setValue('');
        }

        this._consoleWindow.setValue(this._consoleStr);
        this._consoleWindow.refresh();
        this._codeEditor.refresh();
    };

    ICoreWidget.prototype.removeNode = function (gmeId) {
        this._codeEditor.setValue('// Node was removed');
        clearTimeout(this._autoSaveTimerId);
    };

    ICoreWidget.prototype.updateNode = function (desc) {
        if (typeof desc.scriptCode === 'string' && desc.scriptCode !== this._codeEditor.getValue()) {
            clearTimeout(this._autoSaveTimerId);
            this._codeEditor.setValue(desc.scriptCode);
        }
    };

    ICoreWidget.prototype.getCode = function () {
        return this._codeEditor.getValue();
    };

    ICoreWidget.prototype.addConsoleMessage = function (level, logPieces) {
        var scrollInfo,
            timestamp = Date.now(),
            logMessage = logPieces.map(function (arg) {
                return typeof arg === 'string' ? arg : JSON.stringify(arg);
            }).join(' '),
            logData = {
                level: level,
                timestamp: timestamp,
                message: logMessage
            };

        this._logs.push(logData);

        if (this._logMessage(logData)) {
            this._consoleWindow.setValue(this._consoleStr);
            scrollInfo = this._consoleWindow.getScrollInfo();
            this._consoleWindow.scrollTo(scrollInfo.left, scrollInfo.height);
        }
    };

    ICoreWidget.prototype._logMessage = function (logData) {
        var didLog = false,
            level = logData.level;

        if (LOG_LEVELS[level] >= this._logLevel) {
            level = level.length === 5 ? level : level + ' ';
            level = this._consoleStr.length === 0 ? level : '\n' + level;

            this._consoleStr += level + ': ' + logData.message;

            didLog = true;
        }

        return didLog;
    };

    ICoreWidget.prototype.setLogLevel = function (level) {
        var i,
            scrollInfo;

        if (LOG_LEVELS[level] === this._logLevel) {
            return;
        }

        this._logLevel = LOG_LEVELS[level];
        this._consoleStr = '';

        for (i = 0; i < this._logs.length; i += 1) {
            this._logMessage(this._logs[i]);
        }

        this._consoleWindow.setValue(this._consoleStr);
        scrollInfo = this._consoleWindow.getScrollInfo();
        this._consoleWindow.scrollTo(scrollInfo.left, scrollInfo.height);
        this._codeEditor.focus();
    };

    ICoreWidget.prototype.clearConsole = function () {
        this._consoleStr = '';
        this._consoleWindow.setValue(this._consoleStr);
        this._logs = [];
        this._codeEditor.focus();
    };

    ICoreWidget.prototype.toggleConsole = function () {
        this._el.toggleClass('no-console-window');
        this._codeEditor.focus();
    };

    ICoreWidget.prototype.setOrientation = function (vertical) {
        this._verticalOrientation = vertical;

        if (this._verticalOrientation) {
            this._el.addClass('vertical-orientation');
            this._el.removeClass('horizontal-orientation');
        } else {
            this._el.addClass('horizontal-orientation');
            this._el.removeClass('vertical-orientation');
        }

        this._codeEditor.focus();
        this._codeEditor.refresh();
        this._consoleWindow.refresh();
    };

    ICoreWidget.prototype.loadTemplate = function (id) {
        var template = this._templates[id];
        clearTimeout(this._autoSaveTimerId);

        this._codeEditor.setValue(template.script);
        this._consoleWindow.setValue(template.description);

        this._consoleWindow.refresh();
        this._codeEditor.refresh();

        this._codeEditor.focus();
    };

    ICoreWidget.prototype.setAutoSave = function (enable) {
        clearTimeout(this._autoSaveTimerId);
        this._autoSave = enable;

        this._codeEditor.focus();
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ICoreWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._el.width(width);
        this._el.height(height);
        this._logger.debug('Widget is resizing...');
    };

    ICoreWidget.prototype.destroy = function () {
        clearTimeout(this._autoSaveTimerId);
    };

    ICoreWidget.prototype.onActivate = function () {
        this._logger.debug('ICoreWidget has been activated');
        this._codeEditor.focus();
    };

    ICoreWidget.prototype.onDeactivate = function () {
        this._logger.debug('ICoreWidget has been deactivated');
    };

    return ICoreWidget;
});
